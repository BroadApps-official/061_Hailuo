import Foundation
import SwiftUI
import Combine
import StoreKit
import ApphudSDK

@MainActor
final class APIManager: ObservableObject {
  static let shared = APIManager()

  @AppStorage("apphudUserId") private var storedUserId: String?
  private var lastResultUrl: String?
  
  var userId: String {
    if let existingId = storedUserId {
      print("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π userId: \(existingId)")
      return existingId
    } else {
      let newUserId = Apphud.userID()
      print("üì± –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π userId: \(newUserId)")
      storedUserId = newUserId
      return newUserId
    }
  }
  
  var token: String = "rE176kzVVqjtWeGToppo4lRcbz3HRLoBrZREEvgQ8fKdWuxySCw6tv52BdLKBkZTOHWda5ISwLUVTyRoZEF0A33Xpk63lF9wTCtDxOs8XK3YArAiqIXVb7ZS4IK61TYPQMu5WqzFWwXtZc1jo8w"

  private let baseURL = "https://vewapnew.online/api"
  private let session: URLSession

  private init() {
    let configuration = URLSessionConfiguration.default
    configuration.timeoutIntervalForRequest = 30
    configuration.timeoutIntervalForResource = 300
    let delegate = InsecureURLSessionDelegate()
    session = URLSession(configuration: configuration, delegate: delegate, delegateQueue: nil)
  }

  @MainActor
  private func safeFetchGenerationStatus(generationId: String) async -> Result<GenerationStatusData, Error> {
      do {
          let response = try await fetchGenerationStatus(generationId: generationId)
          return .success(response)
      } catch {
          return .failure(error)
      }
  }

  // MARK: - üì∏ Pika Scenes (–§–æ—Ç–æ + –ü—Ä–æ–º–ø—Ç)
  func generatePikaScenes(imageUrls: [URL], promptText: String, completion: @escaping (Result<String, Error>) -> Void) {
    let boundary = UUID().uuidString
    let endpoint = "\(baseURL)/generate/pikaScenes"
    var request = URLRequest(url: URL(string: endpoint)!)
    request.httpMethod = "POST"
    request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
    request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

    var bodyData = Data()

    let params: [String: String] = [
      "mode": "precise",
      "promptText": promptText,
      "userId": userId,
      "appId": "com.test.test"
    ]

    for (key, value) in params {
      bodyData.append("--\(boundary)\r\n".data(using: .utf8)!)
      bodyData.append("Content-Disposition: form-data; name=\"\(key)\"\r\n\r\n".data(using: .utf8)!)
      bodyData.append("\(value)\r\n".data(using: .utf8)!)
    }

    for (index, imageUrl) in imageUrls.enumerated() {
      do {
        let imageData = try Data(contentsOf: imageUrl)
        bodyData.append("--\(boundary)\r\n".data(using: .utf8)!)
        bodyData.append("Content-Disposition: form-data; name=\"ingredients[]\"; filename=\"image\(index).jpg\"\r\n".data(using: .utf8)!)
        bodyData.append("Content-Type: image/jpeg\r\n\r\n".data(using: .utf8)!)
        bodyData.append(imageData)
        bodyData.append("\r\n".data(using: .utf8)!)
      } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(error.localizedDescription)")
        completion(.failure(error))
        return
      }
    }

    bodyData.append("--\(boundary)--\r\n".data(using: .utf8)!)
    request.httpBody = bodyData

    print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Pika Scenes –∑–∞–ø—Ä–æ—Å –Ω–∞ \(endpoint)")

    let task = URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
        if let error = error {
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
        completion(.failure(error))
          return
        }
        
      guard let httpResponse = response as? HTTPURLResponse else {
        completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid response"])))
        return
      }

      print("üì° HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")

      guard let data = data else {
        completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "No data received"])))
        return
      }

      print("üì° –ü–æ–ª—É—á–µ–Ω JSON: \(String(data: data, encoding: .utf8) ?? "nil")")

      do {
        if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
          print("üì° –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: \(json)")

          if let error = json["error"] as? String {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(error)")
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: error])))
      return
    }
    
          guard let data = json["data"] as? [String: Any],
                let generationId = data["generationId"] as? String else {
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data –∏–ª–∏ generationId –≤ –æ—Ç–≤–µ—Ç–µ")
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid response format"])))
      return
    }
    
          print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω generationId: \(generationId)")

          let video = GeneratedVideo(
            id: UUID().uuidString,
            generationId: generationId,
            videoUrl: "",
            promptText: promptText,
            createdAt: Date(),
            status: .generating
          )
          GeneratedVideosManager.shared.addVideo(video)

          self?.startTrackingGeneration(generationId: generationId)

          completion(.success(generationId))
        } else {
          print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
          completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid JSON format"])))
        }
      } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
        completion(.failure(error))
      }
    }
    task.resume()
  }


  // MARK: - üìù Text-to-Video (–ü—Ä–æ–º–ø—Ç ‚Üí –í–∏–¥–µ–æ)
  func generateTextToVideo(promptText: String, completion: @escaping (Result<String, Error>) -> Void) {
    let parameters: [String: Any] = [
        "promptText": promptText,
        "userId": userId,
        "appId": "com.test.test"
    ]

    print("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: \(parameters)")

    let url = URL(string: "\(baseURL)/generate/txt2video")!
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.setValue("application/json", forHTTPHeaderField: "Content-Type")
    request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

    do {
      request.httpBody = try JSONSerialization.data(withJSONObject: parameters)
    } catch {
      completion(.failure(error))
      return
    }

    print("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: \(url)")
    print("üì± –ó–∞–≥–æ–ª–æ–≤–∫–∏: \(request.allHTTPHeaderFields ?? [:])")

    let task = URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
      if let error = error {
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
        completion(.failure(error))
        return
      }

      guard let httpResponse = response as? HTTPURLResponse else {
        completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid response"])))
        return
      }

      print("üì± HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
      
      guard let data = data else {
        completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "No data received"])))
        return
      }

      print("üì± –ü–æ–ª—É—á–µ–Ω JSON: \(String(data: data, encoding: .utf8) ?? "nil")")

      do {
        if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
          print("üì± –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: \(json)")

          if let error = json["error"] as? String {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(error)")
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: error])))
            return
          }

          guard let data = json["data"] as? [String: Any],
                let generationId = data["generationId"] as? String else {
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data –∏–ª–∏ generationId –≤ –æ—Ç–≤–µ—Ç–µ")
            completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid response format"])))
            return
          }

          print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω generationId: \(generationId)")

          let video = GeneratedVideo(
            id: UUID().uuidString,
            generationId: generationId,
            videoUrl: "",
            promptText: promptText,
            createdAt: Date(),
            status: .generating
          )
          GeneratedVideosManager.shared.addVideo(video)

          self?.startTrackingGeneration(generationId: generationId)

          completion(.success(generationId))
        } else {
          print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
          completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Invalid JSON format"])))
        }
      } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
        completion(.failure(error))
      }
    }
    task.resume()
  }
  
  private func startTrackingGeneration(generationId: String) {
      let timer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { [weak self] timer in
          guard let self = self else { return }

          Task {
              do {
                  let response = try await self.fetchGenerationStatus(generationId: generationId)

                  switch response.status {
                  case "queued", "processing", "pending":
                      print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç, –∂–¥–µ–º...")

                  case "completed":
                      if let videoUrl = response.resultUrl {
                          timer.invalidate()
                          if let video = GeneratedVideosManager.shared.videos.first(where: { $0.generationId == generationId }) {
                              GeneratedVideosManager.shared.updateVideoStatus(id: video.id, status: .completed, resultUrl: videoUrl)
                              print("üéâ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: \(videoUrl)")
                          }
                      } else {
                          print("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å 'completed', –Ω–æ URL –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                      }

                  case "error":
                      timer.invalidate()
                      if let video = GeneratedVideosManager.shared.videos.first(where: { $0.generationId == generationId }) {
                          GeneratedVideosManager.shared.updateVideoStatus(id: video.id, status: .failed)
                      }
                      print("üö® –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")

                  default:
                      print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: \(response.status)")
                  }
              } catch {
                  timer.invalidate()
                  if let video = GeneratedVideosManager.shared.videos.first(where: { $0.generationId == generationId }) {
                      GeneratedVideosManager.shared.updateVideoStatus(id: video.id, status: .failed)
                  }
                  print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: \(error.localizedDescription)")
              }
          }
      }
  }

  func fetchGenerationStatus(generationId: String) async throws -> GenerationStatusData {
      let url = URL(string: "\(baseURL)/generationStatus?generationId=\(generationId)")!
      var request = URLRequest(url: url)
      request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

      print("üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Pika –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(generationId)")

      // üì° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      let (data, response) = try await URLSession.shared.data(for: request)

      // üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥
      guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {
          throw APIError.invalidResponse
      }

      print("üì± HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
      print("üì± –ü–æ–ª—É—á–µ–Ω JSON —Å—Ç–∞—Ç—É—Å–∞: \(String(data: data, encoding: .utf8) ?? "nil")")

      // üì° –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –≤ –º–æ–¥–µ–ª—å
      do {
        let decodedResponse = try JSONDecoder().decode(GenerationStatusResponse.self, from: data)

        if decodedResponse.data.status == "completed", let resultUrl = decodedResponse.data.resultUrl {
              lastResultUrl = resultUrl
              print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, URL: \(resultUrl)")
          }

        return decodedResponse.data
      } catch {
          print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å—Ç–∞—Ç—É—Å–∞: \(error)")
          throw APIError.invalidResponse
      }
  }
}

// MARK: - üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
class InsecureURLSessionDelegate: NSObject, URLSessionDelegate {
  func urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) {
    completionHandler(.useCredential, URLCredential(trust: challenge.protectionSpace.serverTrust!))
  }
}

// MARK: - üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Identifiable –¥–ª—è URL
extension URL: Identifiable {
  public var id: URL { self }
}

