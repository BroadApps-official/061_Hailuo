import SwiftUI

struct GeneratingView: View {
    let imageData: Data?
    let text: String?
    let effectId: String?
    @StateObject private var apiManager = HailuoManager.shared
    @Environment(\.dismiss) private var dismiss
    @State private var timer: Timer?
    @State private var showResultView = false
    @State private var generatedVideoUrl: String?
    @State private var isGenerating = false
    @State private var error: String?
    
    init(imageData: Data? = nil, text: String? = nil, effectId: String? = nil) {
        self.imageData = imageData
        self.text = text
        self.effectId = effectId
    }
    
    var body: some View {
        VStack(spacing: 20) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Text("Generating your video")
                .font(.title2.bold())
                .foregroundColor(.white)
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if isGenerating {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                    .scaleEffect(1.5)
            }
            
            // –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
            Text(isGenerating ? "Please wait..." : "Done!")
                .foregroundColor(.white)
            
            // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            if !isGenerating {
                Button(action: {
                    dismiss()
                }) {
                    Text("Close")
                        .font(.headline)
                        .foregroundColor(.white)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.blue)
                        .cornerRadius(12)
                }
                .padding(.top, 20)
            }
        }
        .padding()
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.black)
        .task {
            await generateVideo()
        }
        .alert("Error", isPresented: .constant(error != nil)) {
            Button("OK") {
                error = nil
                dismiss()
            }
        } message: {
            if let error = error {
                Text(error)
            }
        }
        .fullScreenCover(isPresented: $showResultView) {
            if let videoUrl = generatedVideoUrl {
                ResultView(videoUrl: videoUrl)
            }
        }
    }
    
    private func generateVideo() async {
        isGenerating = true
        do {
            if let imageData = imageData, let effectId = effectId {
                let response = try await apiManager.generateVideo(from: imageData, filterId: effectId)
                if response.error {
                    error = response.messages.first ?? "Unknown error occurred"
                } else {
                    startCheckingStatus()
                }
            } else if let text = text {
                let response = try await apiManager.generateTextToVideo(promptText: text) { result in
                    if result.error {
                        error = result.messages.first ?? "Unknown error occurred"
                    } else {
                        startCheckingStatus()
                    }
                }
            }
        } catch {
            self.error = error.localizedDescription
            isGenerating = false
        }
    }
    
    private func startCheckingStatus() {
        timer = Timer.scheduledTimer(withTimeInterval: 10, repeats: true) { _ in
            Task {
                await checkGenerationStatus()
            }
        }
    }
    
    private func checkGenerationStatus() async {
        do {
            let generations = try await apiManager.fetchGenerationStatus()
            
            // ‚úÖ –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (—Ç–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ `id` –Ω–∞–∏–±–æ–ª—å—à–∏–π)
            if let latestGeneration = generations.max(by: { $0.id < $1.id }) {
                
                switch latestGeneration.status {
                case 0, 1, 2:
                    print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç, –∂–¥–µ–º...")
                    return
                    
                case 3:
                    if let videoUrl = latestGeneration.result {
                        timer?.invalidate()
                        timer = nil
                        generatedVideoUrl = videoUrl
                        showResultView = true
                        isGenerating = false
                        print("üéâ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: \(videoUrl)")
                    } else {
                        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å 3, –Ω–æ URL –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                    }
                    
                case 4:
                    timer?.invalidate()
                    timer = nil
                    error = "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    isGenerating = false
                    print("üö® –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                    
                default:
                    print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: \(latestGeneration.status)")
                }
            } else {
                print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç, –∂–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            }
            
        } catch {
            self.error = error.localizedDescription
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(error.localizedDescription)")
        }
    }
}

#Preview {
    GeneratingView(imageData: Data(), effectId: "test")
}
