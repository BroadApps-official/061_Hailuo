import SwiftUI

struct GeneratingView: View {
    let imageData: Data?
    let text: String?
    let effectId: String?

    @StateObject private var apiManager = APIManager.shared
    @Environment(\.dismiss) private var dismiss
    @State private var timer: Timer?
    @State private var showResultView = false
    @State private var generatedVideoUrl: String?
    @State private var isGenerating = true
    @State private var error: String?
    @State private var lastGenerationId: String?

    init(imageData: Data? = nil, text: String? = nil, effectId: String? = nil) {
        self.imageData = imageData
        self.text = text
        self.effectId = effectId
    }

    var body: some View {
        VStack(spacing: 20) {
          Spacer()
            LottieView(animationName: "animation")
              .frame(width: 166, height: 235)
            Text("Creating a video...")
                .font(.title2.bold())
                .foregroundColor(.white)

            Text("Generation usually takes about a minute")
                .foregroundColor(.white)
          Spacer()
        }
        .padding()
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.black)
        .task {
            await generateVideo()
        }
        .alert("Error", isPresented: .constant(error != nil)) {
            Button("OK") {
                error = nil
                dismiss()
            }
        } message: {
            if let error = error {
                Text(error)
            }
        }
        .fullScreenCover(isPresented: $showResultView) {
            if let videoUrl = generatedVideoUrl {
                ResultView(videoUrl: videoUrl, promptText: text)
            }
        }
    }

    private func generateVideo() async {
        isGenerating = true
        do {
            if let imageData = imageData, let effectId = effectId {
                let response = try await HailuoManager.shared.generateVideo(from: imageData, filterId: effectId)
                if response.error {
                    error = response.messages.first ?? "Unknown error occurred"
                } else {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
                    let generations = try await HailuoManager.shared.fetchUserGenerations()
                    if let lastGeneration = generations.last {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ID \(lastGeneration.id), —Å—Ç–∞—Ç—É—Å \(lastGeneration.status)")
                        lastGenerationId = String(lastGeneration.id)
                        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞...")
                        startCheckingStatus()
                    } else {
                        error = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
                    }
                }
            } else if let text = text, let imageData = imageData, let imageUrl = saveImageToTempDirectory(imageData) {
                print("üì∏ –ó–∞–ø—É—Å–∫–∞–µ–º `generatePikaScenes`...")
                apiManager.generatePikaScenes(imageUrls: [imageUrl], promptText: text) { result in
                    handleGenerationResult(result)
                }
            } else if let text = text {
                print("üìù –ó–∞–ø—É—Å–∫–∞–µ–º `generateTextToVideo`...")
                apiManager.generateTextToVideo(promptText: text) { result in
                    handleGenerationResult(result)
                }
            }
        } catch {
            DispatchQueue.main.async {
                self.error = error.localizedDescription
                self.isGenerating = false
            }
        }
    }

  private func saveImageToTempDirectory(_ imageData: Data) -> URL? {
      let tempDirectory = FileManager.default.temporaryDirectory
      let fileURL = tempDirectory.appendingPathComponent("\(UUID().uuidString).jpg")

      do {
          try imageData.write(to: fileURL)
          print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: \(fileURL)")
          return fileURL
      } catch {
          print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(error.localizedDescription)")
          return nil
      }
  }

    private func handleGenerationResult(_ result: Result<String, Error>) {
        DispatchQueue.main.async {
            switch result {
            case .success(let generationId):
                print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, ID: \(generationId)")
                lastGenerationId = generationId
                print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞...")
                startCheckingStatus()

            case .failure(let apiError):
                error = apiError.localizedDescription
                isGenerating = false
                print("üö® –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(apiError.localizedDescription)")
            }
        }
    }

    private func startCheckingStatus() {
        guard let generationId = lastGenerationId else {
            print("‚ùå –û—à–∏–±–∫–∞: lastGenerationId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–∞–π–º–µ—Ä –ù–ï –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
            return
        }

        print("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ID: \(generationId)")

        DispatchQueue.main.async {
            self.timer?.invalidate()
            print("‚úÖ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")

            self.timer = Timer.scheduledTimer(withTimeInterval: 10, repeats: true) { _ in
                print("üîÑ [TIMER] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ID: \(generationId)...")
                Task {
                    await self.checkGenerationStatus(for: generationId)
                }
            }
            print("üéØ –¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        }
    }

  @MainActor
  private func checkGenerationStatus(for generationId: String) async {
      print("üîç [API CALL] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ID: \(generationId)")

      do {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º HailuoManager
          let generations = try await HailuoManager.shared.fetchUserGenerations()
          print("üì• [HAILUO RESPONSE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

          // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–ø–æ –Ω–∞–∏–±–æ–ª—å—à–µ–º—É `id`)
          if let lastGeneration = generations.max(by: { $0.id < $1.id }) {
              print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–∞–º–∞—è –Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ID \(lastGeneration.id), —Å—Ç–∞—Ç—É—Å \(lastGeneration.status)")

              switch lastGeneration.status {
              case 1, 2:
                  print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç, –∂–¥–µ–º...")

              case 4:
                  print("üö® –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å 4 (–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)")
                  timer?.invalidate()
                  timer = nil
                  isGenerating = false
                  DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                      dismiss() // –ó–∞–∫—Ä—ã–≤–∞–µ–º `GeneratingView` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ `MainContentView`
                  }

              case 3:
                  if let resultUrl = lastGeneration.result {
                      timer?.invalidate()
                      timer = nil
                      generatedVideoUrl = resultUrl
                      showResultView = true
                      isGenerating = false
                      print("üéâ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: \(resultUrl)")
                  } else {
                      print("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å '3', –Ω–æ URL –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                  }

              default:
                  print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: \(lastGeneration.status)")
              }
          } else {
              print("‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")
          }
      } catch {
          self.error = error.localizedDescription
          print("‚ùå [API ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(error.localizedDescription)")
      }
  }
}

#Preview {
    GeneratingView(imageData: Data(), effectId: "test")
}
