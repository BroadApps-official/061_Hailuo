import SwiftUI

struct GeneratingView: View {
    let imageData: Data?
    let text: String?
    let effectId: String?

    @StateObject private var apiManager = APIManager.shared
    @Environment(\.dismiss) private var dismiss
    @State private var timer: Timer?
    @State private var showResultView = false
    @State private var generatedVideoUrl: String?
    @State private var isGenerating = false
    @State private var error: String?
    @State private var lastGenerationId: String?

    init(imageData: Data? = nil, text: String? = nil, effectId: String? = nil) {
        self.imageData = imageData
        self.text = text
        self.effectId = effectId
    }

    var body: some View {
        VStack(spacing: 20) {
            Text("Generating your video")
                .font(.title2.bold())
                .foregroundColor(.white)

            if isGenerating {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                    .scaleEffect(1.5)
            }

            Text(isGenerating ? "Please wait..." : "Done!")
                .foregroundColor(.white)

            if !isGenerating {
                Button(action: { dismiss() }) {
                    Text("Close")
                        .font(.headline)
                        .foregroundColor(.white)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.blue)
                        .cornerRadius(12)
                }
                .padding(.top, 20)
            }
        }
        .padding()
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.black)
        .task {
            await generateVideo()
        }
        .alert("Error", isPresented: .constant(error != nil)) {
            Button("OK") {
                error = nil
                dismiss()
            }
        } message: {
            if let error = error {
                Text(error)
            }
        }
        .fullScreenCover(isPresented: $showResultView) {
            if let videoUrl = generatedVideoUrl {
                ResultView(videoUrl: videoUrl, promptText: text)
            }
        }
    }

    private func generateVideo() async {
        isGenerating = true
        do {
            if let imageData = imageData, let effectId = effectId {
                let response = try await HailuoManager.shared.generateVideo(from: imageData, filterId: effectId)
                if response.error {
                    error = response.messages.first ?? "Unknown error occurred"
                } else {
                    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞...")
                    startCheckingStatus()
                }
            } else if let text = text, let imageData = imageData, let imageUrl = saveImageToTempDirectory(imageData) {
                print("üì∏ –ó–∞–ø—É—Å–∫–∞–µ–º `generatePikaScenes`...")
              apiManager.generatePikaScenes(imageUrls: [imageUrl], promptText: text) { result in
                              handleGenerationResult(result)
                          }
            } else if let text = text {
                print("üìù –ó–∞–ø—É—Å–∫–∞–µ–º `generateTextToVideo`...")
                apiManager.generateTextToVideo(promptText: text) { result in
                    handleGenerationResult(result)
                }
            }
        } catch {
            DispatchQueue.main.async {
                self.error = error.localizedDescription
                self.isGenerating = false
            }
        }
    }

  private func saveImageToTempDirectory(_ imageData: Data) -> URL? {
      let tempDirectory = FileManager.default.temporaryDirectory
      let fileURL = tempDirectory.appendingPathComponent("\(UUID().uuidString).jpg")

      do {
          try imageData.write(to: fileURL)
          print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: \(fileURL)")
          return fileURL
      } catch {
          print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(error.localizedDescription)")
          return nil
      }
  }

    private func handleGenerationResult(_ result: Result<String, Error>) {
        DispatchQueue.main.async {
            switch result {
            case .success(let generationId):
                print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, ID: \(generationId)")
                lastGenerationId = generationId
                print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞...")
                startCheckingStatus()

            case .failure(let apiError):
                error = apiError.localizedDescription
                isGenerating = false
                print("üö® –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(apiError.localizedDescription)")
            }
        }
    }

    private func startCheckingStatus() {
        guard let generationId = lastGenerationId else {
            print("‚ùå –û—à–∏–±–∫–∞: lastGenerationId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–∞–π–º–µ—Ä –ù–ï –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
            return
        }

        print("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ID: \(generationId)")

        DispatchQueue.main.async {
            self.timer?.invalidate()
            print("‚úÖ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")

            self.timer = Timer.scheduledTimer(withTimeInterval: 10, repeats: true) { _ in
                print("üîÑ [TIMER] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ID: \(generationId)...")
                Task {
                    await self.checkGenerationStatus(for: generationId)
                }
            }
            print("üéØ –¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        }
    }

    private func checkGenerationStatus(for generationId: String) async {
        print("üîç [API CALL] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ID: \(generationId)")

        apiManager.fetchGenerationStatus(generationId: generationId) { result in
            DispatchQueue.main.async {
                print("üì• [API RESPONSE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                switch result {
                case .success(let statusResponse):
                    print("‚úÖ [SUCCESS] –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(statusResponse)")

                    guard let response = statusResponse as? GenerationStatusResponse else {
                        print("‚ùå [ERROR] API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                        return
                    }

                    switch response.status {
                    case "processing", "queued", "pending":
                        print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç, –∂–¥–µ–º...")

                    case "finished":
                        if let videoUrl = response.resultUrl {
                            timer?.invalidate()
                            timer = nil
                            generatedVideoUrl = videoUrl
                            showResultView = true
                            isGenerating = false
                            print("üéâ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: \(videoUrl)")
                        } else {
                            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å 'finished', –Ω–æ URL –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                        }

                    case "error":
                        timer?.invalidate()
                        timer = nil
                        error = response.error ?? "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        isGenerating = false
                        print("üö® –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")

                    default:
                        print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: \(response.status)")
                    }

                case .failure(let error):
                    self.error = error.localizedDescription
                    print("‚ùå [API ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(error.localizedDescription)")
                }
            }
        }
    }
}

#Preview {
    GeneratingView(imageData: Data(), effectId: "test")
}
